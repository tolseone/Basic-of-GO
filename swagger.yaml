openapi: 3.0.0
info:
  title: Сервис по обмену вещами Steam
  version: 0.0.1
  description: API for exchanging virtual items
servers:
  - url: http://62.113.111.6/api/v1/
    description: Dev server
paths:
  /items:
    get:
      summary: Метод получения вещей # A short summary of what the operation does.
      tags: 
        - Items
      responses:
        "200":
          description: Успешный ответ со списком вещей # REQUIRED. A description of the response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Items"
        'default':
          description: Всё нестандартное (кроме 200 ОК)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Создать новый предмет
      tags:
        - Items
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Item"
      responses:
        "200":
          description: Успешное создание вещи # REQUIRED. A description of the response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        '400':
          description: "Bad request, invalid item data"
        '500':
          description: "Internal server error"
        'default':
          description: Всё нестандартное (кроме 200 ОК)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /items/{item_id}:
    get:
      summary: Метод получения вещи по идентификатору # A short summary of what the operation does.
      tags: 
        - Items
      parameters: 
        - name: item_id
          in: path
          required: true
          description: Идентификатор вещи
          schema:
            type: string
            example: 72aswerf-728d-kf72-j2ud-9f8sk5jg7f43h
      responses:
        "200":
          description: Успешный ответ с 1-ой вещью # REQUIRED. A description of the response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Item"
        'default':
          description: Всё нестандартное (кроме 200 ОК)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    delete:
      summary: Удалить вещь по идентификатору
      tags:
        - Items
      parameters: 
        - name: item_id
          in: path
          required: true
          description: Идентификатор вещи
          schema:
            type: string
            example: 72aswerf-728d-kf72-j2ud-9f8sk5jg7f43h 
      responses:
        '200':
          description: "Item deleted successfully"
          content:
            application/json:
              {}
        '404':
          description: "Item not found"
        '500':
          description: "Internal server error" 
  /items/{item_id}/trades:
    get:
      summary: Получить трейды, в которых есть выбранный предмет
      tags: 
        - Trades
      parameters: 
        - name: item_id
          in: path
          required: true
          description: Идентификатор вещи
          schema:
            type: string
            example: 72aswerf-728d-kf72-j2ud-9f8sk5jg7f43h
      responses:
        "200":
          description: Успешный ответ с трейдом, в котором есть выбранная вещь # REQUIRED. A description of the response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trade"
        'default':
          description: Всё нестандартное (кроме 200 ОК)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"          
  /trades:
    get:
      summary: Получить трейд офферы всех пользователей сервиса
      tags: 
        - Trades
      responses:
        "200":
          description: Успешный ответ со списком всех трейд офферов # REQUIRED. A description of the response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trades"
        'default':
          description: Всё нестандартное (кроме 200 ОК)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Создать новый трейд
      tags:
        - Trades
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trade"
      responses:
        "200":
          description: Успешное создание обмена # REQUIRED. A description of the response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trade"
        '400':
          description: "Bad request, invalid ..."
        '500':
          description: "Internal server error"
        'default':
          description: Всё нестандартное (кроме 200 ОК)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /trades/{trade_id}:
    get:
      summary: Получить информацию о трейде по идентификатору трейда
      tags:
        - Trades
      parameters: 
        - name: trade_id
          in: path
          required: true
          schema:
            type: string
            example: qwer-rtyu-iopa
      responses:
        "200":
          description: Успешный ответ с информацией о выбранном трейде
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trade"
        'default':
          description: Всё нестандартное (кроме 200 ОК)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Обновить статус трейда
      tags:
        - Trades
      parameters:
        - in: path
          name: trade_id
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Trade"
      responses:
        '200':
          description: "Trade status updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trade"
        '400':
          description: "Bad request, invalid trade status data"
        '404':
          description: "Trade not found"
        '500':
          description: "Internal server error"
    delete:
      summary: Удалить трейд
      tags:
        - Trades
      parameters:
        - in: path
          name: trade_id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: "Trade canceled successfully"
        '404':
          description: "Trade not found"
        '500':
          description: "Internal server error"
  /users:
    get:
      summary: Получение списка всех пользователей
      tags:
        - Users
      responses:
        "200":
          description: Успешный ответ со списком всех пользователей # REQUIRED. A description of the response
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        'default':
          description: Всё нестандартное (кроме 200 ОК)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Добавление нового пользователя
      tags:
        - Users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '201':
          description: "User created successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: "Bad request, invalid user data"
        '500':
          description: "Internal server error"
        
  /users/{user_id}:
    get:
      summary: Получить пользователя по идентификатору пользователя
      tags:
        - Users
      parameters: 
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 17
      responses:
        "200":
          description: Успешный ответ с информацией о выбранном пользователе
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        'default':
          description: Всё нестандартное (кроме 200 ОК)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Обновить информацию о пользователе
      tags:
        - Users
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        '200':
          description: "User information updated successfully"
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        '400':
          description: "Bad request, invalid user data"
        '404':
          description: "User not found"
        '500':
          description: "Internal server error"
    delete:
      summary: Удаление пользователя
      tags:
        - Users
      parameters:
        - in: path
          name: user_id
          required: true
          schema:
            type: integer
      responses:
        '204':
          description: "User deleted successfully"
        '404':
          description: "User not found"
        '500':
          description: "Internal server error"
  /users/{user_id}/trades:
    get:
      summary: Получить трейды определенного пользователя по идентификатору пользователя
      tags:
        - Trades
      parameters: 
        - name: user_id
          in: path
          required: true
          schema:
            type: integer
            example: 17
      responses:
        "200":
          description: Успешный ответ с трейдами выбранного пользователя
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Trade"
        'default':
          description: Всё нестандартное (кроме 200 ОК)
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"  
              




components:
  schemas:
    Item:
      type: object
      required:
        - item_id
        - name
        - rarity
      properties:
        item_id:
          type: string
          example: 72aswerf-728d-kf72-j2ud-9f8sk5jg7f43h
        name:
          type: string
          example: Hook
        rarity:
          type: string
          enum:
            - common
            - uncommon
            - rare
            - mystical
            - legendary
            - immortal
            - arcana
          description: Редкость предмета
        description:
          type: string
          description: Описание предмета
    Items:
      type: array
      items:
        $ref: "#/components/schemas/Item"
        
        
    Error:
      type: object
      required: 
        - code
        - message
      properties:
        code:
          type: integer
        message:
          type: string
          example: "Что-то пошло не так..."
          
    Trade:
      type: object
      required:
        - trade_id
      properties:
        trade_id:
          type: string
          example: qwer-rtyu-iopa
        status:
          type: string
          description: "Статус обмена"
          enum:
            - pending
            - accepted
            - rejected
        offered_item:
          $ref: "#/components/schemas/Item"
          description: Предложенный предмет
        requested_item:
          $ref: "#/components/schemas/Item"
          description: Желаемый предмет
    Trades:
      type: array
      items:
        $ref: "#/components/schemas/Trade"
        
    
    User:
      type: object
      required: 
        - user_id
        - email
      properties:
        user_id:
          type: integer
          description: Уникальный идентификатор пользователя
          example: 17
        username:
          type: string
          description: Имя пользователя
          example: tolseone
        email:
          type: string
          description: Адрес электронной почты пользователя
          example: zxc@mail.ru
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
        description: Список всех пользователей